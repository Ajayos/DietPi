#!/bin/bash
# Created by MichaIng / micha@dietpi.com / dietpi.com
{
# Load DietPi-Globals
. /boot/dietpi/func/dietpi-globals
readonly G_PROGRAM_NAME='DietPi-Build'
G_CHECK_ROOT_USER
G_CHECK_ROOTFS_RW
readonly FP_ORIGIN=$PWD # Store origin dir
G_INIT
G_EXEC cd "$FP_ORIGIN" # Process everything in origin dir instead of /tmp/$G_PROGRAM_NAME
G_EXIT_CUSTOM(){
	findmnt -M rootfs &> /dev/null && G_EXEC umount -R rootfs
	[[ -d rootfs ]] && G_EXEC rmdir rootfs
	losetup /dev/loop0 &> /dev/null && G_EXEC losetup -d /dev/loop0
	(( $mask_dbus )) && G_EXEC systemctl mask --now dbus dbus.socket
}

# Check for valid target hardware model and set variables accordingly
WIFI_REQUIRED=1
case "$HW_MODEL" in
	0) iname='RPi' partition_start=4;;
	*) G_DIETPI-NOTIFY 1 "Invalid HW_MODEL \"$HW_MODEL\" passed. Aborting..."; exit 1;;
esac

# Check for valid target hardware architecture and set variables accordingly
case "$HW_ARCH" in
	1) iarch='ARMv6' parch='armhf' repo='http://raspbian.raspberrypi.org/raspbian/';;
	2) iarch='ARMv7' parch='armhf' repo='https://deb.debian.org/debian/';;
	3) iarch='ARMv8' parch='arm64' repo='https://deb.debian.org/debian/';;
	10) iarch='x86_64' parch='amd64' repo='https://deb.debian.org/debian/';;
	*) G_DIETPI-NOTIFY 1 "Invalid HW_ARCH \"$HW_ARCH\" passed. Aborting..."; exit 1;;
esac

# Dependencies
G_AG_CHECK_INSTALL_PREREQ parted dosfstools debootstrap dbus systemd-container

# Create loop device with partitions
G_EXEC fallocate -l 1G "DietPi_$iname-$iarch-Bullseye.img"
G_EXEC parted -s "DietPi_$iname-$iarch-Bullseye.img" unit MiB mklabel msdos mkpart primary fat32 $partition_start $((partition_start+128)) mkpart primary ext4 $((partition_start+128)) 100%
G_EXEC losetup loop0 "DietPi_$iname-$iarch-Bullseye.img"
G_EXEC partprobe /dev/loop0
G_EXEC partx -u /dev/loop0

# Create filesystems
G_EXEC mkfs.fat -F 32 /dev/loop0p1
G_EXEC mke2fs -t ext4 /dev/loop0p2

# Mount filesytems
G_EXEC mkdir rootfs
G_EXEC mount /dev/loop0p2 rootfs
G_EXEC mkdir rootfs/boot
G_EXEC mount /dev/loop0p1 rootfs/boot

# Create fstab
cat << _EOF_ > rootfs/etc/fstab
PARTUUID=$(lsblk -no PARTUUID /dev/loop0p2) / ext4 noatime,lazytime 0 1
PARTUUID=$(lsblk -no PARTUUID /dev/loop0p1) /boot vfat noatime,lazytime 0 2
_EOF_

# Create rc.local to automate DietPi-PREP
cat << '_EOF_' > rootfs/etc/rc.local
#!/bin/dash
{
_EOF_
G_EXEC chmod +x rootfs/etc/rc.local

# - RPi only: https://github.com/RPi-Distro/repo/issues/253
[[ $HW_MODEL == 0 ]] && cat << '_EOF_' >> rootfs/etc/rc.local
curl -sSfLO 'https://archive.raspberrypi.org/debian/pool/main/r/raspberrypi-archive-keyring/raspberrypi-archive-keyring_2016.10.31_all.deb' || exit 1
dpkg -i raspberrypi-archive-keyring_2016.10.31_all.deb || exit 1
rm raspberrypi-archive-keyring_2016.10.31_all.deb || exit 1
_EOF_

cat << _EOF_ >> rootfs/etc/rc.local
export GITBRANCH='master' HW_MODEL='$HW_MODEL' IMAGE_CREATOR=0 PREIMAGE_INFO='from scratch' WIFI_REQUIRED=$WIFI_REQUIRED DISTRO_TARGET=6
bash -c "\$(curl -sSfL 'https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/PREP_SYSTEM_FOR_DIETPI.sh')"
poweroff
exit 0
} > /dev/console 2>&1 < /dev/console
_EOF_

# Bootstrap
G_EXEC_OUTPUT=1 G_EXEC debootstrap --arch="$parch" --variant=minbase --exclude='gcc-7-base,gcc-8-base,gcc-9-base' --include='bash-completion,bzip2,ca-certificates,console-setup,cron,curl,dropbear,ethtool,fake-hwclock,fdisk,gnupg,htop,ifupdown,isc-dhcp-client,kmod,locales,nano,p7zip,parted,procps,psmisc,rfkill,sudo,systemd-sysv,systemd-timesyncd,tzdata,udev,unzip,usbutils,wget,whiptail' --no-check-gpg bullseye ./rootfs "$repo"

# Start container
# - dbus required for container spawn
mask_dbus=0
if [[ $(readlink /etc/systemd/system/dbus.socket) == '/dev/null' ]]
then
	mask_dbus=1
	G_EXEC systemctl unmask dbus.socket dbus
	G_EXEC systemctl start dbus.socket dbus
fi
# - Bind mounts required to allow container reading its own drive info
# - CAP_IPC_LOCK required for mlock/mlockall, used by vmtouch
systemd-nspawn -bD rootfs --bind=/dev/loop0 --bind=/dev/loop0p1 --bind=/dev/loop0p2 --capability=CAP_IPC_LOCK || exit 1
G_EXEC sync
G_EXEC sleep 1
G_EXEC umount -R rootfs
G_EXEC rmdir rootfs
G_EXEC losetup -d /dev/loop0
(( $mask_dbus )) && { G_EXEC systemctl mask --now dbus dbus.socket && mask_dbus=0; }

# Imager
export FP_ROOT_DEV=2 CLONING_TOOL='dd' OUTPUT_IMG_NAME="DietPi_$iname-$iarch-Bullseye" MOUNT_IT='Off'
bash -c "$(curl -sSfL "https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/.meta/dietpi-imager")" 'DietPi-Imager' "DietPi_$iname-$iarch-Bullseye.img" || exit 1

# Upload
[[ -x 'upload.sh' ]] && ./upload.sh "DietPi_$iname-$iarch-Bullseye.7z"

exit 0
}
