#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Function:
	# - Synchronise system clock with network time
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Launches systemd-timesyncd for network time sync
	#
	# Usage:
	# - /boot/dietpi/func/run_ntpd
	# - /boot/dietpi/func/run_ntpd 1 | Force new sync despite success flag
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /boot/dietpi/func/dietpi-globals
	readonly G_PROGRAM_NAME='DietPi-TimeSync'
	G_CHECK_ROOT_USER
	#G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	[[ $1 == 1 ]] && INPUT=1 || INPUT=0

	readonly FP_FLAG='/run/systemd/timesync/synchronized' MAX_LOOPS_CHECK=${MAX_LOOPS_CHECK:-60} # seconds
	EXIT_CODE=1

	Update_NTPD()
	{
		NTP_UPDATE_MODE=$(sed -n '/^[[:blank:]]*CONFIG_NTP_MODE=/{s/^[^=]*=//p;q}' /boot/dietpi.txt)
		# Assume status okay when manual mode is detected
		if [[ $NTP_UPDATE_MODE != [1-4] ]]
		then
			G_DIETPI-NOTIFY 2 'Manual mode detected, skipping time sync'
			EXIT_CODE=0
			return 0

		# Forced mode: Remove flag file and restart service to force a fresh sync
		elif (( $INPUT == 1 ))
		then
			[[ -f $FP_FLAG ]] && G_EXEC rm "$FP_FLAG"
			G_EXEC systemctl restart systemd-timesyncd

		# Regular mode: Do not restart service to not abort a sync in progress on boot or concurrent execution
		else
			G_EXEC systemctl start systemd-timesyncd
		fi

		# Loop NTP check until success, or, non-G_INTERACTIVE and timeout
		while (( $EXIT_CODE ))
		do
			for ((i=1; i<=$MAX_LOOPS_CHECK; i++))
			do
				# Check for systemd-timesyncd flag file
				if [[ -f $FP_FLAG ]]
				then
					G_DIETPI-NOTIFY 2 'Time sync completed'
					EXIT_CODE=0
					break 2

				elif (( $i < $MAX_LOOPS_CHECK ))
				then
					G_DIETPI-NOTIFY 2 "Waiting for time sync ($i/$MAX_LOOPS_CHECK)"
					sleep 1
				else
					G_DIETPI-NOTIFY 2 'Time sync timed out'

					G_WHIP_MENU_ARRAY=(

						'Retry' ': (Recommended) Rerun network time sync'
						'NTP mirror' ': Change the NTP mirror used'
						'Override' ': (NOT RECOMMENDED) Ignore failure and override time sync status'

					)

					G_WHIP_DEFAULT_ITEM='Retry'
					G_WHIP_MENU 'Network time sync has not yet completed or failed to update.\nTo prevent issues with outdated system time during installations, please select an option below.\n
NB: We highly recommend choosing "Retry" first. Failing that, try to change the "NTP mirror".\n"Override" is a last resort and may cause follow-up issues due to incorrect system clock time.' || break 2

					if [[ $G_WHIP_RETURNED_VALUE == 'NTP mirror' ]]
					then
						G_WHIP_MSG 'DietPi-Config will now be launched, on the next screen:\n - Select "NTP Mirror"\n - Select a different NTP mirror\n\nOnce completed, exit dietpi-config to resume.'
						/boot/dietpi/dietpi-config 16 1

					elif [[ $G_WHIP_RETURNED_VALUE == 'Override' ]]
					then
						EXIT_CODE=0
						break 2
					fi
				fi
			done

			# Start service again in case it failed: This has no effect when running already.
			G_EXEC systemctl start systemd-timesyncd
		done

		# Stop service on oneshot modes, but recreate flag file on success which is removed on service stop
		(( $NTP_UPDATE_MODE < 4 )) || return $EXIT_CODE
		G_EXEC systemctl stop systemd-timesyncd
		(( $EXIT_CODE == 0 )) || return $EXIT_CODE
		G_EXEC mkdir -p /run/systemd/timesync
		> "$FP_FLAG"
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	# Run only once each boot session or when forced via $1 == 1
	# shellcheck disable=SC2015
	[[ $INPUT != 1 && -f $FP_FLAG ]] && EXIT_CODE=0 || Update_NTPD

	# Return status
	G_DIETPI-NOTIFY -1 $EXIT_CODE 'Network time sync'
	(( $EXIT_CODE )) && G_DIETPI-NOTIFY 2 'Please check the service logs for more information:\n - journalctl -u systemd-timesyncd'
	#-----------------------------------------------------------------------------------
	exit $EXIT_CODE
	#-----------------------------------------------------------------------------------
}
